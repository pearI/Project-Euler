/*
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number  would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The
 * first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, etc. Let us
 * list the factors of the first seven triangle numbers:
 *
 *  1: 1
 *  3: 1,3
 *  6: 1,2,3,6
 *  10: 1,2,5,10
 *  15: 1,3,5,15
 *  21: 1,3,7,21
 *  28: 1,2,4,7,14,28
 *
 *  We can see that 28 is the first triangle number to have over five divisors.
 *  What is the value of the first triangle number to have over five hundred
 *  divisors?
 */

// Each iteration we add the index to `triangle` to evaluate the the triangle
// number. To determine the amount of divisors we iterate over a list of 1 to
// the square root of the triangle number. If the triangle divided by this
// index has no remainder, that means there are two more divisors present.
// We add an extra divisor when dealing with perfect squares. The triangle
// number of the iteration that has more than 500 divisors is our answer.
let triangle = 0;
for ( let i = 1; i < 1e5; i++ ) {
    triangle += i;

    let divisors = 0;
    for ( let j = 1; j < Math.sqrt( triangle ); j++ ) {
       if ( !( triangle % j ) ) divisors += 2;
    }

    if ( Math.sqrt( triangle ) * Math.sqrt( triangle ) === triangle ) divisors++;

    if ( divisors > 500 ) {
        console.log( triangle );
        break;
    }
}


